{"repository_name":"gd-icon-renderer","body":"# gd-icon-renderer\n\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://oatmealine.github.io/gd-icon-renderer/)\n\nA (WIP) Crystal Geometry Dash icon renderer library, utilizing [libvips](https://www.libvips.org/)\n\n## Why?\n\nServer-side rendering of icons. This functionality doesn't need to be restricted to an HTTP server, so I figured I could just move it into a library.\n\n## Pre-requisites\n\nYou'll need to install [libvips](https://www.libvips.org/install.html), alongside a `devel` package for building if available. **Be sure to leave this note in the README of the application you're making too.**\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n    ```yaml\n    dependencies:\n      gd-icon-renderer:\n        github: oatmealine/gd-icon-renderer\n    ```\n\n2. Run `shards install`\n\n## Usage\n\nThe library is in its infancy stages; you'll be offered very little support in getting this to work in an actual application.\n\nCurrently, for all examples under `examples/`, you'll have to plug an [extracted spritesheet](https://gdcolon.com/gdsplitter/) of `GJ_GameSheet02-uhd` and `GJ_GameSheetGlow-uhd` along with their `plist` files in `data/`.","program":{"html_id":"gd-icon-renderer/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"gd-icon-renderer","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"gd-icon-renderer/IconRenderer","path":"IconRenderer.html","kind":"module","full_name":"IconRenderer","name":"IconRenderer","abstract":false,"locations":[{"filename":"src/assets.cr","line_number":2,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/assets.cr#L2"},{"filename":"src/gd-icon-renderer.cr","line_number":8,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/gd-icon-renderer.cr#L8"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"extended_modules":[{"html_id":"gd-icon-renderer/IconRenderer","kind":"module","full_name":"IconRenderer","name":"IconRenderer"}],"types":[{"html_id":"gd-icon-renderer/IconRenderer/Assets","path":"IconRenderer/Assets.html","kind":"module","full_name":"IconRenderer::Assets","name":"Assets","abstract":false,"locations":[{"filename":"src/assets.cr","line_number":2,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/assets.cr#L2"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"gd-icon-renderer/IconRenderer/Assets","kind":"module","full_name":"IconRenderer::Assets","name":"Assets"}],"namespace":{"html_id":"gd-icon-renderer/IconRenderer","kind":"module","full_name":"IconRenderer","name":"IconRenderer"},"doc":"Module handling game assets","summary":"<p>Module handling game assets</p>","instance_methods":[{"html_id":"load(path:String,assets:Tuple(PList::Value,String))-instance-method","name":"load","doc":"Load a given asset. `path` acts as the name, while `assets` is a tuple of the parsed .plist file and its name; see `load_plist`.","summary":"<p>Load a given asset.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"assets","external_name":"assets","restriction":"Tuple(PList::Value, String)"}],"args_string":"(path : String, assets : Tuple(PList::Value, String))","args_html":"(path : String, assets : Tuple(<a href=\"../IconRenderer/PList/Value.html\">PList::Value</a>, String))","location":{"filename":"src/assets.cr","line_number":13,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/assets.cr#L13"},"def":{"name":"load","args":[{"name":"path","external_name":"path","restriction":"String"},{"name":"assets","external_name":"assets","restriction":"Tuple(PList::Value, String)"}],"visibility":"Public","body":"if File.exists?(\"#{assets[1]}/#{path}\")\n  {Vips::Image.new_from_file(\"#{assets[1]}/#{path}\"), ((assets[0])[\"frames\"].as(Hash(String, PList::Value)))[\"#{path}\"].as(Hash(String, PList::Value))}\nelse\n  nil\nend"}},{"html_id":"load_plist(path:String)-instance-method","name":"load_plist","doc":"Loads a .plist file and parses it. Made as a quick shorthand.","summary":"<p>Loads a .plist file and parses it.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/assets.cr","line_number":6,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/assets.cr#L6"},"def":{"name":"load_plist","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"(File.open(path) do |file|\n  PList.parse(file)\nend).not_nil!"}}]},{"html_id":"gd-icon-renderer/IconRenderer/Constants","path":"IconRenderer/Constants.html","kind":"module","full_name":"IconRenderer::Constants","name":"Constants","abstract":false,"locations":[{"filename":"src/constants.cr","line_number":2,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/constants.cr#L2"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COLORS","name":"COLORS","value":"[[125 / 255, 255 / 255, 0, 1.0], [0 / 255, 255 / 255, 0 / 255, 1.0], [0 / 255, 255 / 255, 125 / 255, 1.0], [0 / 255, 255 / 255, 255 / 255, 1.0], [0 / 255, 125 / 255, 255 / 255, 1.0], [0 / 255, 0 / 255, 255 / 255, 1.0], [125 / 255, 0 / 255, 255 / 255, 1.0], [255 / 255, 0 / 255, 255 / 255, 1.0], [255 / 255, 0 / 255, 125 / 255, 1.0], [255 / 255, 0 / 255, 0 / 255, 1.0], [255 / 255, 125 / 255, 0 / 255, 1.0], [255 / 255, 255 / 255, 0 / 255, 1.0], [255 / 255, 255 / 255, 255 / 255, 1.0], [185 / 255, 0 / 255, 255 / 255, 1.0], [255 / 255, 185 / 255, 0 / 255, 1.0], [0 / 255, 0 / 255, 0 / 255, 1.0], [0 / 255, 200 / 255, 255 / 255, 1.0], [175 / 255, 175 / 255, 175 / 255, 1.0], [90 / 255, 90 / 255, 90 / 255, 1.0], [255 / 255, 125 / 255, 125 / 255, 1.0], [0 / 255, 175 / 255, 75 / 255, 1.0], [0 / 255, 125 / 255, 125 / 255, 1.0], [0 / 255, 75 / 255, 175 / 255, 1.0], [75 / 255, 0 / 255, 175 / 255, 1.0], [125 / 255, 0 / 255, 125 / 255, 1.0], [175 / 255, 0 / 255, 75 / 255, 1.0], [175 / 255, 75 / 255, 0 / 255, 1.0], [125 / 255, 125 / 255, 0 / 255, 1.0], [75 / 255, 175 / 255, 0 / 255, 1.0], [255 / 255, 75 / 255, 0 / 255, 1.0], [150 / 255, 50 / 255, 0 / 255, 1.0], [150 / 255, 100 / 255, 0 / 255, 1.0], [100 / 255, 150 / 255, 0 / 255, 1.0], [0 / 255, 150 / 255, 100 / 255, 1.0], [0 / 255, 100 / 255, 150 / 255, 1.0], [100 / 255, 0 / 255, 150 / 255, 1.0], [150 / 255, 0 / 255, 100 / 255, 1.0], [150 / 255, 0 / 255, 0 / 255, 1.0], [0 / 255, 150 / 255, 0 / 255, 1.0], [0 / 255, 0 / 255, 150 / 255, 1.0], [125 / 255, 255 / 255, 175 / 255, 1.0], [125 / 255, 125 / 255, 255 / 255, 1.0]]","doc":"Nabbed from https://github.com/GDColon/GDBrowser/blob/master/iconkit/sacredtexts/colors.json\nDefault colors given to you in vanilla GD","summary":"<p>Nabbed from https://github.com/GDColon/GDBrowser/blob/master/iconkit/sacredtexts/colors.json Default colors given to you in vanilla GD</p>"},{"id":"GAMEMODES","name":"GAMEMODES","value":"[Gamemode.new(\"cube\", \"player_\"), Gamemode.new(\"ship\", \"ship_\"), Gamemode.new(\"ball\", \"player_ball_\"), Gamemode.new(\"ufo\", \"bird_\"), Gamemode.new(\"wave\", \"dart_\"), Gamemode.new(\"robot\", \"robot_\", true), Gamemode.new(\"spider\", \"spider_\", true)]","doc":"Every gamemode in the game as of 2.1","summary":"<p>Every gamemode in the game as of 2.1</p>"}],"namespace":{"html_id":"gd-icon-renderer/IconRenderer","kind":"module","full_name":"IconRenderer","name":"IconRenderer"},"doc":"Various game constants","summary":"<p>Various game constants</p>","types":[{"html_id":"gd-icon-renderer/IconRenderer/Constants/Gamemode","path":"IconRenderer/Constants/Gamemode.html","kind":"struct","full_name":"IconRenderer::Constants::Gamemode","name":"Gamemode","abstract":false,"superclass":{"html_id":"gd-icon-renderer/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"gd-icon-renderer/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"gd-icon-renderer/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"gd-icon-renderer/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/constants.cr","line_number":51,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/constants.cr#L51"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"gd-icon-renderer/IconRenderer/Constants","kind":"module","full_name":"IconRenderer::Constants","name":"Constants"},"doc":"`spicy` = uses 2.0 gamemode render system w/ multiple moving parts","summary":"<p><code><a href=\"../../IconRenderer/Constants/Gamemode.html#spicy%3ABool-instance-method\">#spicy</a></code> = uses 2.0 gamemode render system w/ multiple moving parts</p>","constructors":[{"html_id":"new(name:String,prefix:String,spicy:Bool)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"prefix","external_name":"prefix","restriction":"String"},{"name":"spicy","external_name":"spicy","restriction":"Bool"}],"args_string":"(name : String, prefix : String, spicy : Bool)","args_html":"(name : String, prefix : String, spicy : Bool)","location":{"filename":"src/constants.cr","line_number":51,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/constants.cr#L51"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"prefix","external_name":"prefix","restriction":"String"},{"name":"spicy","external_name":"spicy","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, prefix, spicy)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/constants.cr","line_number":51,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/constants.cr#L51"},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@name.clone, @prefix.clone, @spicy.clone)"}},{"html_id":"copy_with(name_name=@name,prefix_prefix=@prefix,spicy_spicy=@spicy)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_name","default_value":"@name","external_name":"name","restriction":""},{"name":"_prefix","default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_spicy","default_value":"@spicy","external_name":"spicy","restriction":""}],"args_string":"(name _name = @name, prefix _prefix = @prefix, spicy _spicy = @spicy)","args_html":"(name _name = @name, prefix _prefix = @prefix, spicy _spicy = @spicy)","location":{"filename":"src/constants.cr","line_number":51,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/constants.cr#L51"},"def":{"name":"copy_with","args":[{"name":"_name","default_value":"@name","external_name":"name","restriction":""},{"name":"_prefix","default_value":"@prefix","external_name":"prefix","restriction":""},{"name":"_spicy","default_value":"@spicy","external_name":"spicy","restriction":""}],"visibility":"Public","body":"self.class.new(_name, _prefix, _spicy)"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"prefix:String-instance-method","name":"prefix","abstract":false,"def":{"name":"prefix","return_type":"String","visibility":"Public","body":"@prefix"}},{"html_id":"spicy:Bool-instance-method","name":"spicy","abstract":false,"def":{"name":"spicy","return_type":"Bool","visibility":"Public","body":"@spicy"}}]}]},{"html_id":"gd-icon-renderer/IconRenderer/PList","path":"IconRenderer/PList.html","kind":"module","full_name":"IconRenderer::PList","name":"PList","abstract":false,"locations":[{"filename":"src/lib/plist.cr","line_number":4,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist.cr#L4"},{"filename":"src/lib/plist/parser.cr","line_number":4,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist/parser.cr#L4"},{"filename":"src/lib/plist/version.cr","line_number":1,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist/version.cr#L1"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DATE_FORMAT","name":"DATE_FORMAT","value":"\"%FT%X\""},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"namespace":{"html_id":"gd-icon-renderer/IconRenderer","kind":"module","full_name":"IconRenderer","name":"IconRenderer"},"doc":"Nabbed from https://github.com/egillet/plist-cr/","summary":"<p>Nabbed from https://github.com/egillet/plist-cr/</p>","class_methods":[{"html_id":"parse(io:IO)-class-method","name":"parse","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/lib/plist/parser.cr","line_number":5,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist/parser.cr#L5"},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"data = XML.parse(io)\nplist(data.first_element_child)\n"}},{"html_id":"parse(xml:String)-class-method","name":"parse","abstract":false,"args":[{"name":"xml","external_name":"xml","restriction":"String"}],"args_string":"(xml : String)","args_html":"(xml : String)","location":{"filename":"src/lib/plist/parser.cr","line_number":10,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist/parser.cr#L10"},"def":{"name":"parse","args":[{"name":"xml","external_name":"xml","restriction":"String"}],"visibility":"Public","body":"data = XML.parse(xml)\nplist(data.first_element_child)\n"}}],"types":[{"html_id":"gd-icon-renderer/IconRenderer/PList/Value","path":"IconRenderer/PList/Value.html","kind":"alias","full_name":"IconRenderer::PList::Value","name":"Value","abstract":false,"locations":[{"filename":"src/lib/plist.cr","line_number":5,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/lib/plist.cr#L5"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":true,"aliased":"(Array(IconRenderer::PList::Value) | Bool | Float64 | Hash(String, IconRenderer::PList::Value) | Int64 | Slice(UInt8) | String | Time)","aliased_html":"Array(<a href=\"../../IconRenderer/PList/Value.html\">IconRenderer::PList::Value</a>) | Bool | Float64 | Hash(String, <a href=\"../../IconRenderer/PList/Value.html\">IconRenderer::PList::Value</a>) | Int64 | Slice(UInt8) | String | Time","const":false,"namespace":{"html_id":"gd-icon-renderer/IconRenderer/PList","kind":"module","full_name":"IconRenderer::PList","name":"PList"}}]},{"html_id":"gd-icon-renderer/IconRenderer/Renderer","path":"IconRenderer/Renderer.html","kind":"module","full_name":"IconRenderer::Renderer","name":"Renderer","abstract":false,"locations":[{"filename":"src/renderer.cr","line_number":2,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/renderer.cr#L2"}],"repository_name":"gd-icon-renderer","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"gd-icon-renderer/IconRenderer/Renderer","kind":"module","full_name":"IconRenderer::Renderer","name":"Renderer"}],"namespace":{"html_id":"gd-icon-renderer/IconRenderer","kind":"module","full_name":"IconRenderer","name":"IconRenderer"},"doc":"The main renderer module; familiarity with [CrystalVips](https://naqvis.github.io/crystal-vips/index.html) is highly recommended.","summary":"<p>The main renderer module; familiarity with <a href=\"https://naqvis.github.io/crystal-vips/index.html\">CrystalVips</a> is highly recommended.</p>","instance_methods":[{"html_id":"render_icon(filename:String,col1:Array(Float64),col2:Array(Float64),glow:Bool,game_sheet_02:Tuple(PList::Value,String),game_sheet_glow:Tuple(PList::Value,String))-instance-method","name":"render_icon","doc":"The main entrypoint for icon rendering; this should be all you need to render out an icon.\n\nExample:\n```\n# Load assets\nGAME_SHEET_02 = {Assets.load_plist(\"data/GJ_GameSheet02-uhd.plist\"), \"data/GJ_GameSheet02-uhd\"}\nGAME_SHEET_GLOW = {Assets.load_plist(\"data/GJ_GameSheetGlow-uhd.plist\"), \"data/GJ_GameSheetGlow-uhd\"}\n# Render out the icon\nicon_img = IconRenderer::Renderer.render_icon(\"ship_44\", [0.0, 0.0, 0.0, 1.0], [255/255, 125/255, 125/255, 1.0], true, GAME_SHEET_02, GAME_SHEET_GLOW)\n# Trim it out\nalpha = icon_img.extract_band(3)\nleft, top, width, height = alpha.find_trim(threshold: 0, background: [0])\nicon_img = icon_img.crop(left, top, width, height)\n# Write it to a file\nicon_img.write_to_file(\"icon_rendered.png\")\n```","summary":"<p>The main entrypoint for icon rendering; this should be all you need to render out an icon.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"String"},{"name":"col1","external_name":"col1","restriction":"Array(Float64)"},{"name":"col2","external_name":"col2","restriction":"Array(Float64)"},{"name":"glow","external_name":"glow","restriction":"Bool"},{"name":"game_sheet_02","external_name":"game_sheet_02","restriction":"Tuple(PList::Value, String)"},{"name":"game_sheet_glow","external_name":"game_sheet_glow","restriction":"Tuple(PList::Value, String)"}],"args_string":"(filename : String, col1 : Array(Float64), col2 : Array(Float64), glow : Bool, game_sheet_02 : Tuple(PList::Value, String), game_sheet_glow : Tuple(PList::Value, String))","args_html":"(filename : String, col1 : Array(Float64), col2 : Array(Float64), glow : Bool, game_sheet_02 : Tuple(<a href=\"../IconRenderer/PList/Value.html\">PList::Value</a>, String), game_sheet_glow : Tuple(<a href=\"../IconRenderer/PList/Value.html\">PList::Value</a>, String))","location":{"filename":"src/renderer.cr","line_number":48,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/renderer.cr#L48"},"def":{"name":"render_icon","args":[{"name":"filename","external_name":"filename","restriction":"String"},{"name":"col1","external_name":"col1","restriction":"Array(Float64)"},{"name":"col2","external_name":"col2","restriction":"Array(Float64)"},{"name":"glow","external_name":"glow","restriction":"Bool"},{"name":"game_sheet_02","external_name":"game_sheet_02","restriction":"Tuple(PList::Value, String)"},{"name":"game_sheet_glow","external_name":"game_sheet_glow","restriction":"Tuple(PList::Value, String)"}],"visibility":"Public","body":"glow_col = is_black(col2) ? (is_black(col1) ? [1.0, 1.0, 1.0, 1.0] : col1) : col2\nlayers = [(glow || ((is_black(col1)) && (is_black(col2)))) ? Assets.load(\"#{filename}_glow_001.png\", game_sheet_glow) : nil, Assets.load(\"#{filename}_2_001.png\", game_sheet_02), Assets.load(\"#{filename}_3_001.png\", game_sheet_02), Assets.load(\"#{filename}_001.png\", game_sheet_02), Assets.load(\"#{filename}_extra_001.png\", game_sheet_02)]\ncolors = [glow_col, col2, nil, col1, nil]\ni = -1\nrender_layered(layers.select do |v|\n  v != nil\nend.map do |t|\n  t.not_nil![0]\nend, layers.select do |v|\n  v != nil\nend.map do |t|\n  parse_vec(t.not_nil![1].not_nil![\"spriteSourceSize\"].as(String))\nend, colors.select do |v|\n  layers[(  i = i + 1)]?\nend)\n"}},{"html_id":"render_layered(images:Array(Vips::Image),sizes:Array(Tuple(Int32,Int32)),colors:Array(Array(Float64)|Nil))-instance-method","name":"render_layered","doc":"Mainly for internal use; given an array of images, their sizes and colors, tints and composits them over each other.","summary":"<p>Mainly for internal use; given an array of images, their sizes and colors, tints and composits them over each other.</p>","abstract":false,"args":[{"name":"images","external_name":"images","restriction":"Array(Vips::Image)"},{"name":"sizes","external_name":"sizes","restriction":"Array(Tuple(Int32, Int32))"},{"name":"colors","external_name":"colors","restriction":"Array(Array(Float64) | ::Nil)"}],"args_string":"(images : Array(Vips::Image), sizes : Array(Tuple(Int32, Int32)), colors : Array(Array(Float64) | Nil))","args_html":"(images : Array(Vips::Image), sizes : Array(Tuple(Int32, Int32)), colors : Array(Array(Float64) | Nil))","location":{"filename":"src/renderer.cr","line_number":12,"url":"https://github.com/oatmealine/gd-icon-renderer/blob/668901e4a3b81568d7eb61260a77d14d70115d9c/src/renderer.cr#L12"},"def":{"name":"render_layered","args":[{"name":"images","external_name":"images","restriction":"Array(Vips::Image)"},{"name":"sizes","external_name":"sizes","restriction":"Array(Tuple(Int32, Int32))"},{"name":"colors","external_name":"colors","restriction":"Array(Array(Float64) | ::Nil)"}],"visibility":"Public","body":"bounding_box = sizes.reduce do |p1, p2|\n  {Math.max(p1[0], p2[0]), Math.max(p1[1], p2[1])}\nend\n(colors[0]? ? images[0] * colors[0] : images[0]).embed(x: Int32.new((bounding_box[0] / 2) - (sizes[0][0] / 2)), y: Int32.new((bounding_box[1] / 2) - (sizes[0][1] / 2)), width: bounding_box[0], height: bounding_box[1]).composite(images[1..].map_with_index do |img, i|\n  colors[i + 1]? ? img * colors[i + 1] : img\nend, [Vips::Enums::BlendMode::Over], x: sizes[1..].map do |v|\n  (bounding_box[0] / 2) - (v[0] / 2)\nend, y: sizes[1..].map do |v|\n  (bounding_box[1] / 2) - (v[1] / 2)\nend)\n"}}]}]}]}}